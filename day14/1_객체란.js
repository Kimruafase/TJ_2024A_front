/*
    > 객체
        - 주체(subject) : `나`라는 실체
        - 객체(object)  : 주체(나)가 아닌 다른 주체(타인)
        - 즉 본인 이외의 다른 실체(주체)를 의미

    > 프로그래밍 객체
        - 성질 / 속성 / 필드, 행동 / 행위 / 메소드
        - 사람(주체 / 나) -----> 프로그램(객체 / 타인)
        - 즉 성질과 행동을 하나로 묶은 데이터 / 자료
        - 인기가 많은 이유 : 생활 속 모든 정의(성질 / 행위)를 디지털화할 수 있다. 코드화

    > 형태
        let 변수객체 = {속성명 : 데이터, 속성명 : 데이터 ~~~}

    > ex_
        자동차
        > 기아k3 
            - 성질 : 색상, 타이어, 의자 등등
            - 행동 : 전진, 후진, 파킹, 잠금등등
        나의 k3와 친구의 k3는 서로 고유한 성질과 행동을 가질 수 있다. 그러므로 다른 객체다.

    > 문법
        1) 선언
        {속성명 : 데이터, 속성명 : 데이터, 속성명 : 데이터}
        - 속성명 :  ' ' 문자처리는 생ㄱ략 가능하지만 특수문자를 포함하는 경우에는 필수

        2) 호출
        객체 전체 : 객체변수명
        객체 내 속성 호출 : 
            > 객체변수.속성명
            > 객체변수['속성명'] 

        3) 수정
            > 속성 내 데이터 수정 : 객체변수.속성명 = 수정할 데이터
            > 속성과 데이터 추가  : 객체변수.새로운속성명 = 새로운데이터

        4) 삭제
            > 속성 삭제 : delete 객체변수.속성명

        5) 다양한 속성값과 객체의 중첩
            > {
                속성명 : 데이터(문자, 숫자, 논리, undefined 등),
                속성명 : [데이터, 데이터, 데이터],
                속성명 : function(){},
                속성명 : { }
            }
            > 실무 웹 / 앱 JSON 형식의 데이터 활용 중요!!!
                JSON : JavaScript Object Notation -> JS객체문법
                {키 : 값, 키 : 값}
                {속성명 : 데이터, 속성명 : 데이터}
                - 속성 / 키 / 필드 / 성질명
                - 데이터 / 값

        6) 키워드
            > 접근 연산자 : 객체 내 속성에 접근 / 호출할 때 사용되는 연산자 / 특수문자
*/

//  1. 객체
console.log({});    // Object : {}, Array : [], function : ()
let 객체변수 = {이름 : `유재석`, age : 40, '직업' : `연예인`, 'address-city' : `부평구`};

//  2. 호출
console.log(객체변수);
console.log(객체변수.이름);
console.log(객체변수.age);
console.log(객체변수.직업);
// console.log(객체변수.address-city);  // 속성명에 특수문자가 포함된 경우 오류 발생
console.log(객체변수["address-city"]);  // 속성명에 특수문자가 있을 경우엔 `.` 말고 []를 사용

//  3. 수정
객체변수.age=50;    // 만일 있는 속성명일 경우 새로운 데이터 대입
객체변수.money=300; // 만일 없는 속성명에 데이터를 대입할 경우 새로운 속성명과 데이터가 추가
console.log(객체변수.money);

//  4. 삭제
delete 객체변수.money;      // 삭제할 속성명을 작성
console.log(객체변수);
객체변수.직업 = undefined;  // 속성은 있고 속성 내 데이터가 없을 때, undefined or '';
console.log(객체변수);

//  - 속성(문자열), 데이터(자료)
    // 객체변수.속성명 = 배열자료
객체변수.쇼핑백 = [`과자`, `음료`, `라면`];
console.log(객체변수);
    // 객체변수.속성명 = 객체자료
객체변수.car = {회사 : `기아`, 색상 : `red`}
console.log(객체변수);
    // 객체변수.속성명 = 함수자료
객체변수.밥먹기 = function(){console.log(`밥먹는 중`);}
console.log(객체변수);
객체변수.밥먹기();